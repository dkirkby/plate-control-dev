% DESI Positioners Accuracy Test Report
% Focal Plane Team
% 2020-02-07 (master template last revised)

```python name='grading', echo=False
# -*- coding: utf-8 -*-
"""
generates html/pdf report for xy accuracy tests

Created on Wed Oct 30 12:57:04 2019

@author: Duan Yutong (dyt@physics.bu.edu)
"""
import os
import sys
import pickle
import numpy as np
import pandas as pd
from datetime import timezone
from DOSlib.positioner_index import PositionerIndex
import posconstants as pc
np.rms = lambda x: np.sqrt(np.mean(np.square(x)))
np.nanrms = lambda x: np.sqrt(np.nanmean(np.square(x)))
idx = pd.IndexSlice
pd.options.display.max_rows = 550
pi = PositionerIndex()
sys.path.append(os.path.abspath('.'))

with open(os.path.join(pc.dirs['xytest_data'], 'pweave_test_src.txt'),
          'r') as h:
    path_input = h.read()  # read input data path
with open(path_input, "rb") as h:
    data = pickle.load(h)  # load FPTestData as pickle
# if not hasattr(data, 'telemetry'):
data.read_telemetry()  # force refresh telemetry in case there's update
# determine targets used and chooose appropriate format for report
if type(data.targets) is str:
    targets = data.targets
else:  # np array, cast into lists for printing
    targets = repr([list(t) for t in data.targets])
```

+------------------------+---------------------------------------------------------------------------------------------------------------+
| **Start time**\        | ``<%=data.t_i.isoformat()%>`` KPNO, ``<%=data.t_i.astimezone(timezone.utc).isoformat()%>`` UTC\               |
| **End time**\          | ``<%=data.t_f.isoformat()%>`` KPNO, ``<%=data.t_f.astimezone(timezone.utc).isoformat()%>`` UTC\               |
| **Duration**\          | ``<%=str(data.delta_t)%> ``\                                                                                  |
| **PCIDs**\             | ``<%=data.pcids%>``\                                                                                          |
| **Product directory**\ | ``<%=data.dir%>``\                                                                                            |
+------------------------+---------------------------------------------------------------------------------------------------------------+

# Test Configuration

+-----------------------------+-----------------------------------------------+
| **Anticollision mode**\     | ``<%=data.anticollision%>``\                  |
| **Number of corrections**\  | ``<%=data.num_corr_max%> ``\                  |
| **Min radius of targets**\  | ``<%=data.test_cfg['targ_min_radius']%> mm``\ |
| **Max radius of targets**\  | ``<%=data.test_cfg['targ_max_radius']%> mm``\ |
| **Number of targets**\      | ``<%=data.ntargets%>``\                       |
+------------------------+----------------------------------------------------+
| **Targets**\                | ``<%=targets%>``                              |
+-----------------------------+-----------------------------------------------+

# Temperature

```python name='posfid temperature', echo=False, width='500px'
# plot overall temperatures for all petals
data.plot_posfid_temp()
```

# Results
```python name='grade distributions', echo=False, width='500px'
# show overall statistics across all petals
_ = data.plot_grade_dist()
```

```python name='error distributions', echo=False, width='linewidth'
data.plot_error_dist()
##### Abnormal status: ``<%=len(posids_abnormal)%>`` positioners
# ```python name='abnormal pos print', echo=False
# data.abnormal_pos_df().reset_index().astype(int, errors='ignore')
# ```
```
