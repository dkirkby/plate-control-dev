"""
MoveGUI

#A GUI to make positioner movement check easier.
# This GUI can move a single/all positioners by sending can command (quick) or talking to the conf file for each positioner first (slow). 
# The differece is: if the wiring is flipped, sending can command will have the rotation direction flipped, but the non-can method will fix it. 
# Use the 'CAN' checkbox to enable can command mode. 
# Select 'ALL' or a specific positioner before making movement. 
# Show INFO  will show the positioner Silicon ID, Full Sillicon ID, and firmware version
# Write Sheet will write the short and full SiID and firmware version to google sheet. 
# Center will center the positioner so that the installation of fibers will be easier. 
# Refresh/Restart will restart the GUI. After plugging/unplugging positioners, you should click this botton. 
# Update petalcontroller.py on beaglebone before using this code. 
# If we want to use it for other testing purpose, for example, move positioners on petals, we should add a select petal function. 
# The google sheet url is now hard-coded too. Can be a variable if needed for other purpose. 
# If you want to edit other googlesheet, the write_googlesheet method should be modified correspondingly. 
# On different computers, you probably need to set the path differently. Search all the os.path in this code and modify them. 
# Tell the code where to find google_access_account.json when setting up for another computer. 
# Needs gspread and oauth2client packages. googlesheets.py under data_processing_scripts folder is made by Brandon, and the google_access_account.json is generated by him too. 
# History: V1.0   Kai Zhang @LBNL  2017-10-17   Contact: zkdtckk@gmail.com
# Implemented on Beyonce on 2017-10-17, just change the data_processing_scripts relative location to work. 
#          V1.1  Kai Zhang, 2018-04-02. Add canbus input to talk to different cans for EM Petal. 
#          V1.2  Kai Zhang  2018-05-01. Add Reload Canbus botton so that no restart is needed. Facilitate the petal check. 
"""
account='badu'
import os
import sys
import datetime
sys.path.append(os.path.abspath('../petal/'))
sys.path.append(os.path.abspath('../posfidfvc/'))
sys.path.append(os.path.abspath('../../../positioner_logs/data_processing_scripts/'))
sys.path.append(os.path.abspath(os.getenv('HOME')+'/focalplane/positioner_logs/data_processing_scripts/'))
sys.path.append(os.path.abspath(os.getenv('HOME')+'/focalplane/pos_utility/'))
import fvchandler
import petal
import petalcomm
import posmovemeasure
import posconstants as pc
import summarizer
import numpy as np
import time
import pos_xytest_plot
import um_test_report as test_report
import traceback
import configobj
import tkinter
import tkinter.filedialog
import tkinter.messagebox
import tkinter.simpledialog
import csv
import collections
from tkinter import *
import googlesheets
import time
import glob
import pdb
from astropy.io import Table

class XYTEST_RESULT_GUI(object):
    def __init__(self,hwsetup_conf='',xytest_conf=''):
        global gui_root

        hwsetup_conf = tkinter.filedialog.askopenfilename(initialdir=pc.dirs['ptl_settings'], filetypes=(("Config file","*.conf"),("All Files","*")), title='Choose petal setup file')
        self.hwsetup = configobj.ConfigObj(hwsetup_conf,unrepr=True)
        gui_root = tkinter.Tk()
        self.ptl = petal.Petal('EM', posids=self.posids,fidids=[],simulator_on=True, sched_stats_on=True, db_commit_on=False, anticollision='adjust')
        self.simulate = False
        self.logfile='MoveGUI.log'
        self.fvc_type='simulator'
        self.fidids=['F021']   
        self.posids = sorted(self.hwsetup['POS_IDS'])
            
# GUI input       
        w=1600
        h=700
        ws=gui_root.winfo_screenwidth()
        hs=gui_root.winfo_screenheight()
        x=(ws/2)-(w/2)
        y=(hs/2)-(h/2)
        gui_root.geometry('%dx%d+%d+%d' % (w,h,x,y))
        
        Button(gui_root,text='Plot',width=10,command=self.plot).grid(row=0,column=4,sticky=W,pady=4)
        
        self.listbox1 = Listbox(gui_root, width=20, height=20,selectmode='single',exportselection=0)
        self.listbox1.grid(row=6, column=0,rowspan=10,pady=4,padx=15)
        # create a vertical scrollbar to the right of the listbox
        yscroll_listbox1 = Scrollbar(command=self.listbox1.yview, orient=tkinter.VERTICAL)
        yscroll_listbox1.grid(row=6, column=0, rowspan=10,sticky=tkinter.E+tkinter.N+tkinter.S,pady=5)
        self.listbox1.configure(yscrollcommand=yscroll_listbox1.set)
        self.listbox1.insert(tkinter.END,'ALL')
        
        for posid in sorted(self.posids):
            self.listbox1.insert(tkinter.END,posid)
        self.listbox1.bind('<ButtonRelease-1>', self.get_list1)

        self.listbox2 = Listbox(gui_root, width=20, height=20,selectmode='single',exportselection=0)
        self.listbox2.grid(row=6, column=3,rowspan=20,pady=4,padx=15)
        # create a vertical scrollbar to the right of the listbox
        yscroll_listbox2 = Scrollbar(command=self.listbox2.yview, orient=tkinter.VERTICAL)
        yscroll_listbox2.grid(row=6, column=0, rowspan=10,sticky=tkinter.E+tkinter.N+tkinter.S,pady=5)
        self.listbox2.configure(yscrollcommand=yscroll_listbox2.set)
        self.listbox2.insert(tkinter.END,'ALL')

        self.listbox2.bind('<ButtonRelease-1>', self.get_list2)

# Right part of the GUI to write to Acceptance Traveller

#       Load the information 
        Label(gui_root,text="You selected").grid(row=3,column=5)
        self.e_selected=Entry(gui_root)
        self.e_selected.grid(row=3,column=6)
        
        yscroll_text2 = Scrollbar(gui_root, orient=tkinter.VERTICAL)
        yscroll_text2.grid(row=6, column=6, rowspan=20,sticky=tkinter.E+tkinter.N+tkinter.S,pady=5)     
        self.text2=Text(gui_root,height=30,width=38)
        self.text2.grid(row=6,column=5,columnspan=2,rowspan=20,sticky=W+E+N+S,pady=4,padx=15)
        self.text2.tag_configure('bold_italics', font=('Arial', 12, 'bold', 'italic'))
        self.text2.tag_configure('big', font=('Verdana', 12, 'bold','bold'))
        self.text2.tag_configure('green', foreground='#476042', font=('Tempus Sans ITC', 12, 'bold'))
        self.text2.tag_configure('red', foreground='#ff0000', font=('Tempus Sans ITC', 12, 'bold'))
        self.text2.tag_configure('yellow', background='#ffff00', font=('Tempus Sans ITC', 12, 'bold'))
        self.text2.configure(yscrollcommand=yscroll_text2.set)   
        yscroll_text2.config(command=self.text2.yview)
        

        
        
        Button(gui_root,text='Refresh/Restart',width=15,command=self.restart).grid(row=0,column=8,sticky=W,pady=4)
        self.pwr_button = Button(gui_root,text='POSPWR is ON', width=15, command=self.toggle, bg='green')
        self.pwr_button.grid(row=1, column=8, sticky=W,pady=4)

        Button(gui_root,text='Clear',width=15,command=self.clear2).grid(row=5,column=6,sticky=W,pady=4)
        
        photo = PhotoImage(file='desi_logo.gif')
        photo=photo.subsample(7)
        label = Label(image=photo,width=20,height=100)
        label.image = photo # keep a reference!
        label.grid(row=16, column=0, columnspan=1, rowspan=20,sticky=W+E+N+S, padx=5, pady=5)
        

        mainloop()
        
    def set_ptl_id(self):
        self.ptl_id=self.e1.get()
        self.canbus='can'+self.e_can.get().strip()        
        print('Loading Petal'+self.ptl_id+', canbus:'+self.canbus)
        gui_root.destroy()


    def sync_mode(self):
        if self.syncmode.get() == 1:
            self.ptl.sync_mode = 'hard'
            self.sync_mode_value='hard'
        else:
            self.ptl.sync_mode = 'soft'
            self.sync_mode_value='soft'
 
    def get_list1(self,event):
        # get selected line index
        index = self.listbox1.curselection()
        # get the line's text
        self.selected=[]
        self.selected.append(self.listbox1.get(index[0]))
        self.e_selected.delete(0,END)
        self.e_selected.insert(0,str(self.selected))
        all_data=glob.glob(pc.dirs['xytest_data']+'*'+self.selected[0].strip()+'*.csv')
        
        for f in all_data:
            temp=f.split('/')
            self.listbox2.insert(tkinter.END,temp[-1])

    def get_list2(self,event):
        index = self.listbox2.curselection()
        self.selected_file=[]
        self.selected_file.append(pc.dirs['xytest_data']+self.listbox2.get(index[0]))
        print(self.selected_file)

    def plot(self):
        data=Table.read(self.selected_file,format='csv')
        filename1=os.getenv('FP_SETTINGS_PATH')+'/pos_settings/unit_'+self.selected[0].strip()+'.conf'
        pos_conf1 = configobj.ConfigObj(filename1,unrepr=True)
        posid1=self.selected[0]
        posmodel1=self.ptl.posmodels[posid1]
        trans1 = ptl.posmodels[posid1].trans
        offset_X1=pos_conf1['OFFSET_X']
        offset_Y1=pos_conf1['OFFSET_Y']
        r1=pos_conf1['LENGTH_R1']
        r2=pos_conf1['LENGTH_R2']
 
        font = {'family' : 'sans-serif',
                 'weight' : 'normal',
                 'size'   : 9}
        plt.rc('font', **font)
        head_width=0.1
        head_length=0.15
        fontsize=25
        plt.figure(1,figsize=(9.5,9.5))
        plt.rc('font', **font)
        plt.subplot(111)
        axes = plt.gca()
        axes.set_xlim([offset_X1-7,offset_X1+7])
        axes.set_ylim([offset_Y1-7,offset_Y1+7])

        theta_min = trans1.posTP_to_obsTP([min(posmodel1.targetable_range_T),0])[0]
        theta_max = trans1.posTP_to_obsTP([max(posmodel1.targetable_range_T),0])[0]
        theta_range = [theta_min,theta_max]
        plot_circle([offset_X1,offset_Y1],r1+r2,theta_range)
        plot_circle([offset_X1,offset_Y1],abs(r1-r2),theta_range)
        plt.plot(data['target_x'],data['target_y'],'ko')
        plt.plot(data['meas_x0'],data['meas_y0'],'b+'(

        pdb.set_trace()                
        

    def plot_circle(center,radius,theta_range):
        annulus_angles = np.arange(0,360,5)*np.pi/180
        annulus_angles = np.append(annulus_angles,annulus_angles[0])
        annulus_outer_x = center[0] + np.abs(radius) * np.cos(annulus_angles)
        annulus_outer_y = center[1] + np.abs(radius) * np.sin(annulus_angles)
        plt.plot(annulus_outer_x,annulus_outer_y,'b-',linewidth=0.5,label='patrol envelope')
        min_line_x = [center[0], radius * np.cos(theta_range[0]*np.pi/180) + center[0]]
        min_line_y = [center[1], radius * np.sin(theta_range[0]*np.pi/180) + center[1]]
        max_line_x = [center[0], radius * np.cos(theta_range[1]*np.pi/180) + center[0]]
        max_line_y = [center[1], radius * np.sin(theta_range[1]*np.pi/180) + center[1]]^M
        plt.plot(min_line_x,min_line_y,'g-',linewidth=0.5,label='theta min')
        plt.plot(max_line_x,max_line_y,'g--',linewidth=0.8,label='theta max')



    def toggle(self, flag = [0]):
        flag[0] = not flag[0]
        if flag[0]:
            self.pospwr_off()
            self.pwr_button.config(bg='grey')
            self.pwr_button.config(text='POSPWR is OFF')
        else:
            self.pospwr_on()
            self.pwr_button.config(text='POSPWR is ON')
            self.pwr_button.config(bg='green')

    def pospwr_on(self):
        self.pcomm.pbset('ps1_en','on')
        self.pcomm.pbset('ps2_en', 'on')

    def pospwr_off(self):
        self.pcomm.pbset('ps1_en','off')
        self.pcomm.pbset('ps2_en','off')
 
    
    def restart(self):
        gui_root.destroy()
        MoveGUI()

    def clear1(self):
        self.text1.delete('0.0', END)
    def clear2(self):
        self.text2.delete('0.0', END)
        
    def logwrite(self,text,stdout=True):
        """Standard logging function for writing to the test traveler log file.
        """
        line = '# ' + pc.timestamp_str_now() + ': ' + text
        with open(self.logfile,'a') as fh:
            fh.write(line + '\n')
        if stdout:
            print(line)

    def posidnum_to_posid(self,posidnum):
        output=[]
        for i in range(len(posidnum)):
            pos_this=posidnum[i]
            if len(str(pos_this))==1:
                str_out='M0000'+str(pos_this)
            elif len(str(pos_this))==2:
                str_out='M000'+str(pos_this)
            elif len(str(pos_this))==3:
                str_out='M00'+str(pos_this)
            elif len(str(pos_this))==4:
                str_out='M0'+str(pos_this)
            elif len(str(pos_this))==5:
                str_out='M'+str(pos_this)
            else:
                str_out=str(pos_this)
            output.append(str_out)
        return output
    def posid_to_posidnum(self,posids):
        if isinstance(posids, (list,)):
            output=[]
            for i in range(len(posids)):
                posid=posids[i]
                output.append(int(posid[-4:]))
        else:
            output=int(posids[-4:])
        return output



if __name__=="__main__":
    gui = XYTEST_RESULT_GUI()
