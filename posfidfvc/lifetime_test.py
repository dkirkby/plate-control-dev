import numpy as np
import configobj
import sys, os
sys.path.append(os.path.abspath('../petal/'))
import petal
import fvchandler
import posconstants as pc
import posmovemeasure
import xyaccuracy_test
import datetime
from os import environ



def generate_random_posXY(r_min, r_max):
    x = np.random.uniform(-r_max, r_max)
    y_max = np.sqrt(r_max**2 - x**2)
    if abs(x) > r_min:
        y_min = -y_max
    else:
        y_min = np.sqrt(r_min**2 - x**2)
        rand_flip = True
    y = np.random.uniform(y_min, y_max)
    if rand_flip:
        rand = np.random.uniform(-1,1)
        if rand < 0:
            rand = -1
        else:
            rand = 1
        y *= rand
    return x,y
    
def generate_uniform_posXY(r_min,r_max):
    '''Generates uniformly distributed points in circular area
       Starts with uniformly distributed square then reject points
       found outside the circle.
       Returns one xy pair.'''
    reject = True
    while reject:
        x = np.random.uniform(-r_max, r_max)
        y = np.random.uniform(-r_max, r_max)
        r = np.sqrt(x**2 + y**2)
        if r < r_max and r > r_min:
            reject = False
    return x,y
    
def generate_random_move_list(r_min, r_max, num_points, filename = 'randPosXY.txt'):
    '''Generates File of random points so that the "randomness" of the test may
       be repeated'''
    file = open(filename, 'w')
    for i in range(num_points):
        x,y = generate_uniform_posXY(r_min,r_max)
        line = str(x) + ',' + str(y) + '\n'
        file.write(line)
    file.close()
    
def read_random_move_list(filename):
    '''Reader function for generated points text file
       Returns list of xy pairs'''
    with open(filename, 'r') as file:
        move_list = []
        for line in file:
            xy = line.split(',')
            x = float(xy[0])
            y = float(xy[1])
            move_list.append([x,y])
    return move_list

LOOPS=15 #Number of times to move randomly then do XY test (DESI-doc-1985-v2)

#Accelerated Lifetime Test
if len(sys.argv) ==1:
    configfile='accuracy_test.conf'
else:
    configfile=sys.argv[1]

config = configobj.ConfigObj(configfile,unrepr=True)


petal_id = config['petal']['petal_id']
pos_ids = config['positioners']['ids']
fid_ids = []

log_directory = pc.test_logs_directory
log_timestamp = datetime.datetime.now().strftime(pc.filename_timestamp_format)
#m = posmovemeasure.PosMoveMeasure(ptl,fvc)
#m.calibrate(pos_ids='all', mode='quick', save_file_dir=log_directory, save_file_timestamp=log_timestamp)

points_file = 'posXY_points_12082016.txt' #file generated by generate_random_move
move_list = read_random_move_list(points_file)
num_moves = len(move_list) #Number of movements between XY test should be 25000 (DESI-doc-1985-v2)

#create all the move request dictionaries
life_moves = []
for local_target in move_list:
    these_targets = {}
    for pos_id in pos_ids:
        #posmodel = ptl.get(pos_id)
        these_targets[pos_id] = {'command':'posXY', 'target':local_target}
    life_moves.append(these_targets)

acc_test=xyaccuracy_test.AccuracyTest()

acc_test.enable_logging()
for i in range(LOOPS):
    print('Running accuracy test', i+1, 'of', LOOPS+1)
    m=acc_test.run_xyaccuracy_test()
    print('Starting loop', i+1, 'of', LOOPS)
    print('REPOSITIONING', num_moves, 'CYCLES.') #Move Cycles

    for j in range(len(move_list)):
        print('Cycle', j+1, 'of', num_moves)
        m.move(life_moves[j])

print('Running accuracy test', i+2, 'of', LOOPS+1)
acc_test.run_xyaccuracy_test()


