# Template file for configuration of individual fiber positioner unit.

# ID
POS_ID     = 'xxxxx'    # string, unique serial id number from manufacturing
BUS_ID     = 'can0'	    # string, CAN bus that the positioner belongs to
CAN_ID     = -1         # int,    id number on the CAN bus
DEVICE_LOC = -1         # int,    location id on the petal or plate
PETAL_ID   = -1         # int,    id of the petal or plate it is mounted on

# STATE
POS_T =   0.0               # deg, internally-tracked expected position of the theta shaft at the output of the gearbox
POS_P = 180.0               # deg, internally-tracked expected position of the phi shaft at the output of the gearbox
CTRL_ENABLED = True         # bool, if True, move commands are allowed to be sent to positioner. (False is important to know for move scheduling/anticollision)
FIBER_INTACT = True         # bool, states whether light is visible through fiber by FVC
DEVICE_CLASSIFIED_NONFUNCTIONAL  = False # bool, human entry only to keep track whether positioner is nonfunctional
CURRENT_LOG_BASENAME = ''   # string, keeps track of what logfile we are currently writing to

# CALIBRATION
LENGTH_R1        =   3.0    # mm,        distance from central axis to eccentric ("theta arm")
LENGTH_R2        =   3.0    # mm,        distance from eccentric axis to fiber ("phi arm")
OFFSET_T         =   0.0    # deg,       theta offset calibration
OFFSET_P		 =   0.0    # deg,       phi offset calibration
GEAR_CALIB_T     =   1.0    # unitless,  theta default gear ratio is multiplied by this calibration factor
GEAR_CALIB_P     =   1.0    # unitless,  phi default gear ratio is multiplied by this calibration factor
GEAR_TYPE_T      = 'namiki' # string,    gear type on theta axis
GEAR_TYPE_P      = 'namiki' # string,    gear type on phi axis
OFFSET_X         =   0.0    # mm,        calibrated offset of central axis in x
OFFSET_Y         =   0.0    # mm,        calibrated offset of central axis in y
PHYSICAL_RANGE_T = 380.0    # deg, theta range of travel
PHYSICAL_RANGE_P = 200.0    # deg, phi range of travel
MOTOR_CCW_DIR_T  =    -1    # +1 or -1, defining as-wired motor's counter-clockwise direction
MOTOR_CCW_DIR_P  =    -1    # +1 or -1, defining as-wired motor's counter-clockwise direction
MOTOR_ID_T       =     1    # int, defining as-wired solder pads to which theta motor is connected
MOTOR_ID_P       =     0    # int, defining as-wired solder pads to which phi motor is connected   

# HISTORY
TOTAL_MOVE_SEQUENCES        =   0  # int, lifetime count of how many times the unit has been commanded to perform some move sequence (combined series of theta and phi moves at any speed). This approximately corresponds to the total number of re-targetings the positioner has performed.
TOTAL_CRUISE_MOVES_T        =   0  # int, lower level lifetime count individual moves, at cruise speed, that the unit has been commanded to perform on theta axis
TOTAL_CRUISE_MOVES_P        =   0  # int, ... individual cruise moves ... on phi axis
TOTAL_CREEP_MOVES_T         =   0  # int, ... individual creep moves ... on theta axis
TOTAL_CREEP_MOVES_P         =   0  # int, ... individual creep moves ... on phi axis
TOTAL_LIMIT_SEEKS_T         =   0  # int, lifetime count of how many times the unit has been commanded to hit a theta hard limit
TOTAL_LIMIT_SEEKS_P         =   0  # int, ... a phi hard limit
LAST_PRIMARY_HARDSTOP_DIR_T =   0  # 0, +1, -1, tells you which if any hardstop was last used to set travel limits
LAST_PRIMARY_HARDSTOP_DIR_P =   0  # 0, +1, -1, tells you which if any hardstop was last used to set travel limits
MOVE_CMD               		=  ''  # string, records the move command sequence executed on the positioner
MOVE_VAL1              		=  ''  # string, records first argument(s) of move command sequence
MOVE_VAL2              		=  ''  # string, records second argument(s) of move command sequence
LAST_MEAS_OBS_X             = 0.0  # float, records the last x value measured by the FVC
LAST_MEAS_OBS_Y             = 0.0  # float, records the last y value measured by the FVC
LAST_MEAS_PEAK              = 0.0  # float, range 0.0-1.0, normalized brightness of positioner's backlit dot
LAST_MEAS_FWHM              = 0.0  # float, full width half max of positioner's backlit dot

# TO BE DEPRECATED AFTER TAG V1.10
LAST_MEAS_BRIGHTNESS        = 0.0  # float, range 0.0-1.0, normalized brightness of positioner's backlit dot

# GENERAL SETTINGS
PRINCIPLE_HARDSTOP_DIR_T         =    -1  # int, +1, -1, or 0. +1 means use hardstop at max of theta range, -1 means use hardstop at min of range, 0 means no hardstop e$
PRINCIPLE_HARDSTOP_DIR_P         =    +1  # int, +1, -1, or 0. +1 means use hardstop at max of phi range, -1 means use hardstop at min of range, 0 means no hardstop exi$
PRINCIPLE_HARDSTOP_CLEARANCE_T   =   3.0  # float, minimum distance in deg to stay clear of theta principle hardstop
SECONDARY_HARDSTOP_CLEARANCE_T   =   3.0  # float, minimum distance in deg to stay clear of theta secondary hardstop
PRINCIPLE_HARDSTOP_CLEARANCE_P   =   3.0  # float, minimum distance in deg to stay clear of phi principle hardstop
SECONDARY_HARDSTOP_CLEARANCE_P   =   3.0  # float, minimum distance in deg to stay clear of phi secondary hardstop
LIMIT_SEEK_EXCEED_RANGE_FACTOR   =   1.3  # float, factor beyond nominal range to use when seeking hardstops
CURR_SPIN_UP_DOWN                =   100  # int, 0-100, spin up / spin down current
CURR_CRUISE                      =   100  # int, 0-100, cruise current
CURR_CREEP                       =   100  # int, 0-100, creep current
CURR_HOLD                        =     0  # int, 0-100 can be set to zero to completely power off theta motors after moving
SPINUPDOWN_PERIOD                =    12  # int, number of 55 us periods to repeat each displacement during spin up to cruise speed or spin down from cruise speed. a higher value causes slower acceleration, over a longer travel distance
CREEP_PERIOD                     =     2  # int, number of timer intervals corresponding to a creep step. a higher value causes slower creep
BUMP_CW_FLG                      = False  # bool, if True bump the creep current to 100% during the final 90 degrees of motor rotation
BUMP_CCW_FLG                     = False  # bool, if True bump the creep current to 100% during the final 90 degrees of motor rotation
MIN_DIST_AT_CRUISE_SPEED         = 180.0  # float, minimum rotor distance in deg to travel when at cruise speed before slowing back down
BACKLASH                         =   3.0  # deg  backlash removal distance
ANTIBACKLASH_FINAL_MOVE_DIR_T    =    -1  # +1 or -1, direction to do the last move of any antibacklash sequence on theta axis
ANTIBACKLASH_FINAL_MOVE_DIR_P    =    +1  # +1 or -1, direction to do the last move of any antibacklash sequence on phi axis
ANTIBACKLASH_ON                  = True   # boolean, if true do an antibacklash sequence at end of a move
CREEP_TO_LIMITS                  = False  # bool, if true, when approaching hardstops only creep up on them
ONLY_CREEP                       = False  # bool, if true disable cruising speed
FINAL_CREEP_ON                   = True   # bool, if true do a finishing creep move after cruising
ALLOW_EXCEED_LIMITS              = False  # bool, flag to allow positioner to go past software limits or not. exercise some caution if setting this true

# ANTICOLLISION KEEPOUTS
KEEPOUT_EXPANSION_PHI_RADIAL     = 0.0    # [mm] radial distance to expand phi keepout polygon (about KEEPOUT_PHI center point)
KEEPOUT_EXPANSION_PHI_ANGULAR    = 0.0    # [deg] angular amount to expand phi keepout polygon (cw and ccw, about KEEPOUT_PHI center point)
KEEPOUT_EXPANSION_THETA_RADIAL   = 0.0    # [mm] radial distance to expand theta keepout polygon (about KEEPOUT_THETA center point)
KEEPOUT_EXPANSION_THETA_ANGULAR  = 0.0    # [deg] angular amount to expand theta keepout polygon (cw and ccw, about KEEPOUT_THETA center point)

