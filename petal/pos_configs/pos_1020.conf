# configuration file for the positioner with BUS_ID 1020. Not sure what SERIAL_ID for now

[DEF]
SERIAL_ID = '6.M.02'
BUS_ID = 1020
DEVICE_ID = 'test' # string, id number of location on the petal or plate
PETAL_ID = 'test'  # string, id of the petal or plate it is mounted on
MOTOR_ID_T = 1   # 0 or 1, which motor number in firmware commands corresponds to theta
MOTOR_ID_P = 0   # 0 or 1, which motor number in firmware commands corresponds to phi
LENGTH_R1 = 3.0  # mm
LENGTH_R2 = 3.0  # mm
POLYN_T0 = 0.0   # deg
POLYN_T1 = 1.0   # deg
POLYN_T2 = 0.0   # deg/deg^2
POLYN_P0 = 0.0   # deg      Pobserver = P0 + P1*Pshaft + P2*Pshaft^2
POLYN_P1 = 1.0   # deg
POLYN_P2 = 0.0   # deg/deg^2
POLYN_X0 = 0.0   # deg      Xobserver = X0 + X1*Xpositioner
POLYN_X1 = 1.0   # deg
POLYN_Y0 = 0.0   # deg      Yobserver = Y0 + Y1*Ypositioner
POLYN_Y1 = 1.0   # deg/deg
PHYSICAL_RANGE_T = 380.0  # deg      theta range of travel
PHYSICAL_RANGE_P = 200.0  # deg
BACKLASH = 3.0   # deg  in normal operation, always stay shy of the hardstops by this amount at both ends of the travel range
PRINCIPLE_HARDSTOP_DIR_T = -1.0 # +1 use hardstop at max of range or -1 use hardstop at min of range or 0 no hardstop exists
PRINCIPLE_HARDSTOP_CLEARANCE_T = 10.0 # float, minimum distance in deg to stay clear of theta principle hardstop
SECONDARY_HARDSTOP_CLEARANCE_T =  5.0 # float, minimum distance in deg to stay clear of theta secondary hardstop
PRINCIPLE_HARDSTOP_DIR_P = +1.0 # +1 use hardstop at max of range or -1 use hardstop at min of range or 0 no hardstop exists
PRINCIPLE_HARDSTOP_CLEARANCE_P =  5.0 # float, minimum distance in deg to stay clear of phi principle hardstop
SECONDARY_HARDSTOP_CLEARANCE_P =  5.0 # float, minimum distance in deg to stay clear of phi secondary hardstop
ALLOW_EXCEED_LIMITS = False  # boolean  flag to allow positioner to go past software limits or not. exercise some caution if setting this true
LIMIT_SEEK_EXCEED_RANGE_FACTOR =  1.3  # factor beyond nominal range to use when seeking hardstops
SHOULD_DEBOUNCE_HARDSTOPS = True  # boolean   flag to turn on/off automatic debounce from hardstops. typically leave on for homing, but turn off if need to measure full physical range of travel
BACKLASH_REMOVAL_BACKUP_FRACTION = 0.5  # when move direction == backlash_removal_direction, undershoot by this fraction of BACKLASH, then backup by 1-fraction*BACKLASH, then advance by BACKLASH
CURR_SPIN_UP_DOWN = 100.0  # spin up / spin down current
CURR_CRUISE = 70.0  # cruise current
CURR_CREEP = 70.0  # creep current
SPINUPDOWN_DISTANCE = 628.2  # float, distance at the motor shaft in deg over which to spin up to cruise speed or down from cruise speed
CREEP_PERIOD = 2  # int, number of timer intervals corresponding to a creep step
ONLY_CREEP  = False      # boolean, if true disable cruising speed
FINAL_CREEP_ON  = True      # boolean, if true do a finishing creep move after a cruise
BACKLASH_REMOVAL_ON = True      # boolean, if true do an antibacklash sequence at end of a move
FINAL_CREEP_DIST  = 180.0  # float, distance in deg to creep after a cruise
ANTIBACKLASH_FINAL_MOVE_DIR_T =  -1.0  # +1 or -1 
ANTIBACKLASH_FINAL_MOVE_DIR_P =  +1.0  # +1 or -1 
CREEP_TO_LIMITS =  False # boolean if true , when approaching hardstops only creep up on them
HOLD_CURRENT =  0.0  # can be set to zero to completely power off theta motors after moving
MOTOR_CCW_DIR_T = 1  # +1 or -1, defining as-wired motor's counter-clockwise direction. note 5.N.01=-1, 5.M.01=+1, 6.M.01=-1, 6.M.02=+1
MOTOR_CCW_DIR_P = 1  # +1 or -1, defining as-wired motor's counter-clockwise direction. note 5.N.01=-1, 5.M.01=-1, 6.M.01=-1, 6.M.02=+1
GEAR_T = 'maxon' #PosConstants.gear_ratio_maxon gear ratio of theta axis
GEAR_P = 'maxon' #PosConstants.gear_ratio_maxon gear ratio of phi axis